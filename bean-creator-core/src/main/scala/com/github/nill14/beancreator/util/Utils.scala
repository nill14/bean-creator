package com.github.nill14.beancreator.util

import java.sql.Timestamp

import com.github.nill14.beancreator.model._

object Utils {

	
	def setter(field: IField) = capName("set", field.name)
	
	def getter(field: IField) = {
		if (classOf[Boolean] == parseClass(field))  
			capName("is", field.name)
		else capName("get", field.name)
	}
	
	def capName(prefix: String, name: String) = {
		val b = new StringBuilder
		b append prefix
		b append name.charAt(0).toUpper
		if (name.length > 1) b append name.substring(1)
		b.toString
	}
	
	def varName(bean: IBean) = {
		val b = new StringBuilder
		b append bean.name.charAt(0).toLower
		if (bean.name.length > 1) b append bean.name.substring(1)
		b.toString
	}
	
	def copyrightHeader(w: IndentWriter) {
		val now = new Timestamp(System.currentTimeMillis)
		w println "/* DO NOT MODIFY THIS FILE!"
		w println "The content is generated. Your changes may be lost."
		w println s"Generated by com.github.nill14:bean-creator ${now} */"
		w.println 
	}
	
	
	
	def parseClass(elem: ITypedElement): Class[_] = elem.classType match {
		case None => classOf[String]
		case Some(x) => x match {
			//quick and dirty
			case "int" => classOf[Int]
			case "double" => classOf[Double]
			case className => Class.forName(className)
		}
	}
	
	def value(field: IField): Option[String] = field.defaultValue match {
		case None => None
		case Some(value) => field.classType match {
			case None => Some(s""""$value"""")
			case Some("String") => Some(s""""$value"""")
			case Some("java.lang.String") => Some(s""""$value"""")
			case Some(typ) => Some(value)
		}
	}	
}